name: Deploy docker compose to VM
on:
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Fallback Image tag to deploy'
        required: false
        default: 'main'
      client-image-tag:
        description: 'Client image tag to deploy'
        required: false
      project-image-tag:
        description: 'Project Management image tag to deploy'
        required: false
      sdlc-image-tag:
        description: 'SDLC image tag to deploy'
        required: false
      communication-image-tag:
        description: 'Communication image tag to deploy'
        required: false
      transcription-image-tag:
        description: 'Transcription image tag to deploy'
        required: false
      genai-image-tag:
        description: 'GenAI image tag to deploy'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: prod-vm
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Copy Docker Compose File From Repo to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.PUBLIC_IP }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          source: "./docker-compose.prod.yml"
          target: /home/${{ vars.VM_USER }}

      - name: Copy Keycloak Config From Repo to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.PUBLIC_IP }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          source: "./project-management/keycloak/"
          target: /home/${{ vars.VM_USER }}/keycloak
      
      - name: Copy Prometheus Config From Repo to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.PUBLIC_IP }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          source: "./prometheus/"
          target: /home/${{ vars.VM_USER }}/prometheus

      - name: Copy Grafana Config From Repo to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.PUBLIC_IP }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          source: "./grafana/"
          target: /home/${{ vars.VM_USER }}/grafana

      - name: Copy AlertManager Config From Repo to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.PUBLIC_IP }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          source: "./alertmanager/"
          target: /home/${{ vars.VM_USER }}/alertmanager

      - name: SSH to VM and Create .env.prod
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.PUBLIC_IP }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            mv docker-compose.prod.yml docker-compose.yml
            rm .env
            touch .env
            echo "DOMAIN=${{ vars.PUBLIC_IP }}.nip.io" >> .env
            echo "DEBUG=${{ vars.DEBUG || false }}" >> .env

            echo "TRAEFIK_USER=${{ secrets.TRAEFIK_USER }}" >> .env
            echo "TRAEFIK_PASSWORD=${{ secrets.TRAEFIK_PASSWORD}}" >> .env
            echo "TRAEFIK_PASSWORD_HASH=${{ secrets.TRAEFIK_PASSWORD_HASH}}" >> .env

            echo "KEYCLOAK_ADMIN_USERNAME=${{ secrets.KEYCLOAK_ADMIN_USERNAME }}" >> .env
            echo "KEYCLOAK_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD}}" >> .env

            echo "CLIENT_IMAGE_TAG=${{ inputs.client-image-tag || inputs.image-tag }}" >> .env

            echo "PROJECT_IMAGE_TAG=${{ inputs.project-image-tag || inputs.image-tag }}" >> .env
            echo "PROJECT_DB_USER=${{ secrets.PROJECT_DB_USER }}" >> .env
            echo "PROJECT_DB_PASSWORD=${{ secrets.PROJECT_DB_PASSWORD }}" >> .env

            echo "SDLC_IMAGE_TAG=${{ inputs.sdlc-image-tag || inputs.image-tag}}" >> .env
            echo "SDLC_DB_USER=${{ secrets.SDLC_DB_USER }}" >> .env
            echo "SDLC_DB_PASSWORD=${{ secrets.SDLC_DB_PASSWORD }}" >> .env
            echo "SDLC_TOKEN_SECRET=${{ secrets.SDLC_TOKEN_SECRET }}" >> .env

            echo "COMM_IMAGE_TAG=${{ inputs.communication-image-tag || inputs.image-tag }}" >> .env
            echo "COMM_DB_PASSWORD=${{ secrets.COMM_DB_PASSWORD }}" >> .env
            echo "COMM_DISCORD_SECRET=${{ secrets.COMM_DISCORD_SECRET }}" >> .env
            echo "COMM_DISCORD_BOT_ID=${{ vars.COMM_DISCORD_BOT_ID }}" >> .env
            echo "COMM_DISCORD_API_VERSION=${{ vars.COMM_DISCORD_API_VERSION }}" >> .env
            echo "COMM_DISCORD_BASE_URL=${{ vars.COMM_DISCORD_BASE_URL }}" >> .env

            echo "TRANSCRIPTION_IMAGE_TAG=${{ inputs.transcription-image-tag || inputs.image-tag}}" >> .env
            echo "TRANSCRIPTION_DB_PASSWORD=${{ secrets.TRANSCRIPTION_DB_PASSWORD }}" >> .env
            echo "TRANSCRIPTION_HF_TOKEN=${{ secrets.TRANSCRIPTION_HF_TOKEN }}" >> .env
            echo "TRANSCRIPTION_ASSEMBLYAI_API_KEY=${{ secrets.TRANSCRIPTION_ASSEMBLYAI_API_KEY }}" >> .env
            echo "TRANSCRIPTION_TIMEOUT=${{ vars.TRANSCRIPTION_TIMEOUT }}" >> .env

            echo "GENAI_IMAGE_TAG=${{ inputs.genai-image-tag || inputs.image-tag}}" >> .env
            echo "GENAI_DB_PASSWORD=${{ secrets.GENAI_DB_PASSWORD }}" >> .env
            echo "GENAI_OLLAMA_CLOUD_URL=${{ vars.GENAI_OLLAMA_CLOUD_URL }}" >> .env
            echo "GENAI_NOMIC_API_KEY=${{ secrets.GENAI_NOMIC_API_KEY }}" >> .env
            echo "GENAI_OPEN_WEBUI_BEARER=${{ secrets.GENAI_OPEN_WEBUI_BEARER }}" >> .env
            echo "GENAI_RABBITMQ_USER=${{ secrets.GENAI_RABBITMQ_USER }}" >> .env
            echo "GENAI_RABBITMQ_PASSWORD=${{ secrets.GENAI_RABBITMQ_PASSWORD }}" >> .env
         
            echo "GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER }}" >> .env
            echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env
         
            echo "DISCORD_ALERTMANAGER_WEBHOOK_URL=${{ secrets.DISCORD_ALERTMANAGER_WEBHOOK_URL }}" >> .env
         
      - name: SSH to VM and Execute Docker-Compose Up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.PUBLIC_IP }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          script: |
            echo "Logging into Docker registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "Starting Docker Compose..."
            docker compose -f docker-compose.yml --env-file=.env up --pull=always -d
