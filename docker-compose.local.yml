services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    environment:
      - PROJECT_MANAGEMENT_URL=http://localhost:8080
      - SDLC_URL=http://localhost:8081
      - COMMUNICATION_URL=http://localhost:8082
      - MEETING_NOTES_URL=http://localhost:8083
      - GEN_AI_URL=http://localhost:4242
      - KEYCLOAK_URL=http://localhost:7999
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-trace}
      - KEYCLOAK_CLIENT=${KEYCLOAK_CLIENT:-trace-api}
      - DEBUG=${DEBUG:-false}

  project-management:
    build:
      context: ./project-management
      dockerfile: Dockerfile
    network_mode: host
    depends_on:
      - postgres-db
    environment:
      - DEBUG=${DEBUG:-false}
      - DB_URL=jdbc:postgresql://localhost:5432/project-db
      - DB_USER=${PROJECT_DB_USER:-user}
      - DB_PASSWORD=${PROJECT_DB_PASSWORD:-test}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-trace}
      - KEYCLOAK_AUTH_URL=http://localhost:7999
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - SERVER_PORT=8080
    restart: unless-stopped

  sdlc:
    build:
      context: ./sdlc-connector
      dockerfile: Dockerfile
    network_mode: host
    depends_on:
      - postgres-db
    environment:
      - DEBUG=true
      - TOKEN_SECRET=${SDLC_TOKEN_SECRET:-meinsecret}
      - MODE=${SDLC_MODE:-forward}
      - GENAI_URL=http://localhost:4242
      - DB_URL=jdbc:postgresql://localhost:5432/sdlc-db
      - DB_USER=${POSTGRES_DB_USER:-user}
      - DB_PASSWORD=${POSTGRES_DB_PASSWORD:-test}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-trace}
      - KEYCLOAK_AUTH_URL=http://localhost:7999
      - SERVER_PORT=8081
    restart: unless-stopped
  
  postgres-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD:-test}
      POSTGRES_PORT: 5432
    network_mode: host
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-db.sql

  communication:
    build:
      context: ./comms-connector
      dockerfile: Dockerfile
    network_mode: host
    depends_on:
      mysql-db: 
        condition: service_healthy
    environment:
      - DEBUG=true
      - COMM_DB_URL=jdbc:mysql://localhost:3306/comms-db
      - COMM_DB_USER=root
      - COMM_DB_PASSWORD=${MYSQL_ROOT_PASSWORD:-test}
      - COMM_DISCORD_SECRET=${COMM_DISCORD_SECRET}
      - COMM_DISCORD_BOT_ID=${COMM_DISCORD_BOT_ID:-1377229494263222302}
      - COMM_DISCORD_API_VERSION=${COMM_DISCORD_API_VERSION:-v10}
      - COMM_DISCORD_BASE_URL=${COMM_DISCORD_BASE_URL:-https://discord.com/api}
      - TRACE_GENAI_BASE_URL=http://localhost:4242
      - TRACE_PROJECT_MANAGEMENT_BASE_URL=http://localhost:8080
      - SERVER_PORT=8082
    restart: unless-stopped

  transcription:
    build:
      context: ./transcription
      dockerfile: Dockerfile
      args:
        USE_WHISPERX: ${USE_WHISPERX:-false}
    network_mode: host
    depends_on:
      mysql-db: 
        condition: service_healthy
    environment:
      - DEBUG=true
      - SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/transcription-db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD:-test}
      - HF_TOKEN=${HF_TOKEN}
      - USE_CLOUD=${USE_CLOUD:-true}
      - ASSEMBLYAI_API_KEY=${ASSEMBLYAI_API_KEY}
      - TRANSCRIPTION_TIMEOUT=${TRANSCRIPTION_TIMEOUT:-300000}
      - GENAI_URL=http://localhost:4242
      - SERVER_PORT=8083
    restart: unless-stopped

  genai:
    build:
      context: ./genai
      dockerfile: Dockerfile
    network_mode: host
    depends_on:
      mysql-db:
        condition: service_healthy
    environment:
      - DEBUG=true
      - OLLAMA_CLOUD_URL=https://gpu.aet.cit.tum.de/ollama
      - OLLAMA_LOCAL_URL=http://localhost:11434
      - NOMIC_API_KEY=${NOMIC_API_KEY}
      - OPEN_WEBUI_BEARER=${OPEN_WEBUI_BEARER}
      - WEAVIATE_URL=${WEAVIATE_URL:-http://localhost:6969}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://guest:guest@localhost/}
      - MYSQL_URL=mysql+asyncmy://root:${MYSQL_ROOT_PASSWORD:-test}@localhost:3306/genai-db
      - SERVER_PORT=4242
    restart: unless-stopped

  ollama:
    container_name: ollama
    image: ollama/ollama:latest
    entrypoint:
      - sh
      - -c
      - |
        set -e

        echo "▶️  Starting Ollama server…"
        # Launch server in background
        ollama serve &
        SERVER_PID=$!

        echo "⏳  Waiting for server to be healthy…"
        # simple health‑check loop: try 'ollama list' until it returns success
        until ollama list > /dev/null 2>&1; do
          sleep 1
        done

        echo "✅  Server is up! Pulling llama3.3…"
        # Now that the daemon is running, pull the model
        ollama pull llama3.2

        echo "🚀  Model pulled. Waiting on server (PID $SERVER_PID)…"
        # Drop into the Ollama server process so Docker keeps the container alive
        wait $SERVER_PID
    ports:
      - "11434:11434"
    profiles: [local-ollama]
    volumes:
      - ollama:/root/.ollama
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "ollama list | grep -q llama3.2" ]
      interval: 15s
      timeout: 10s
      retries: 30
  
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - '6969'
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.31.2
    network_mode: host
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_API_BASED_MODULES: 'true'
      CLUSTER_HOSTNAME: 'node1'

  mysql-db:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-test}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql/
      - ./init-mysql.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 3s
      retries: 10
      timeout: 5s

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.5
    command:
      - start-dev
      - --import-realm
    network_mode: host
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_PORT: 7999
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 7999
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
    volumes:
      - ./project-management/keycloak/:/opt/keycloak/data/import/

volumes:
  postgres_db_data:
  mysql_data:
  weaviate_data:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local
  ollama:
