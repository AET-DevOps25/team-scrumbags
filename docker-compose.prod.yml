services:
  reverse-proxy:
    image: traefik:v3.4
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=test@test.de"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=true"
      - "--api.insecure=false"
      # - "--log.level=DEBUG"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "7998:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}"
      # use `htpasswd -nb user test` to generate the user:password hash + replace all $ with $$

  client:
    image: ghcr.io/aet-devops25/team-scrumbags/client:${CLIENT_IMAGE_TAG:-main}
    ports:
      - "4200:80"
    environment:
      - DEBUG=${DEBUG:-false}
      - PROJECT_MANAGEMENT_URL=https://${DOMAIN}/api/project-management
      - SDLC_URL=https://${DOMAIN}/api/sdlc
      - MEETING_NOTES_URL=https://${DOMAIN}/api/transcription
      - COMMUNICATION_URL=https://${DOMAIN}/api/communication
      - GEN_AI_URL=https://${DOMAIN}/api/genai
      - KEYCLOAK_URL=https://auth.${DOMAIN}
      - KEYCLOAK_REALM=trace
      - KEYCLOAK_CLIENT=trace-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`${DOMAIN}`)"
      - "traefik.http.services.client.loadbalancer.server.port=80"
      - "traefik.http.routers.client.entrypoints=websecure"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.client-compress.compress=true"
      - "traefik.http.routers.client.middlewares=client-compress"

  project-management:
    image: ghcr.io/aet-devops25/team-scrumbags/project-management:${PROJECT_IMAGE_TAG:-main}
    ports:
      - "8080:8080"
    depends_on:
      - project-db
    environment:
      - DEBUG=${DEBUG:-false}
      - DB_URL=jdbc:postgresql://project-db:5432/project-db
      - DB_USER=${PROJECT_DB_USER}
      - DB_PASSWORD=${PROJECT_DB_PASSWORD}
      - KEYCLOAK_REALM=trace
      - KEYCLOAK_AUTH_URL=https://auth.${DOMAIN}
      - KEYCLOAK_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.project-management.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/project-management`)"
      - "traefik.http.services.project-management.loadbalancer.server.port=8080"
      - "traefik.http.routers.project-management.entrypoints=websecure"
      - "traefik.http.routers.project-management.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.strip-project-management.stripprefix.prefixes=/api/project-management"
      - "traefik.http.routers.project-management.middlewares=strip-project-management"

  project-db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${PROJECT_DB_USER}
      POSTGRES_PASSWORD: ${PROJECT_DB_PASSWORD}
      POSTGRES_DB: project-db
    volumes:
      - project_db_data:/var/lib/postgresql/data

  sdlc:
    image: ghcr.io/aet-devops25/team-scrumbags/sdlc-connector:${SDLC_IMAGE_TAG:-main}
    ports:
      - "8081:8080"
    depends_on:
      - sdlc-db
    environment:
      - DEBUG=${DEBUG:-false}
      - TOKEN_SECRET=${SDLC_TOKEN_SECRET}
      - SPRING_PROFILES_ACTIVE=forward
      - GENAI_URL=https://${DOMAIN}/api/genai
      - DB_URL=jdbc:postgresql://sdlc-db:5432/sdlc-db
      - DB_USER=${SDLC_DB_USER}
      - DB_PASSWORD=${SDLC_DB_PASSWORD}
      - KEYCLOAK_REALM=trace
      - KEYCLOAK_AUTH_URL=https://auth.${DOMAIN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sdlc.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/sdlc`)"
      - "traefik.http.services.sdlc.loadbalancer.server.port=8080"
      - "traefik.http.routers.sdlc.entrypoints=websecure"
      - "traefik.http.routers.sdlc.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.strip-sdlc.stripprefix.prefixes=/api/sdlc"
      - "traefik.http.routers.sdlc.middlewares=strip-sdlc"

  sdlc-db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${SDLC_DB_USER}
      POSTGRES_PASSWORD: ${SDLC_DB_PASSWORD}
      POSTGRES_DB: sdlc-db
    volumes:
      - sdlc_db_data:/var/lib/postgresql/data

  communication:
    image: ghcr.io/aet-devops25/team-scrumbags/comms-connector:${COMM_IMAGE_TAG:-main}
    ports:
      - "8082:8080"
    depends_on:
      comms-db:
        condition: service_healthy
    environment:
      - DEBUG=${DEBUG:-false}
      - COMM_DB_URL=jdbc:mysql://comms-db:3306/comms-db
      - COMM_DB_USER=root
      - COMM_DB_PASSWORD=${COMM_DB_PASSWORD}
      - COMM_DISCORD_SECRET=${COMM_DISCORD_SECRET}
      - COMM_DISCORD_BOT_ID=${COMM_DISCORD_BOT_ID:-1377229494263222302}
      - COMM_DISCORD_API_VERSION=${COMM_DISCORD_API_VERSION:-v10}
      - COMM_DISCORD_BASE_URL=${COMM_DISCORD_BASE_URL:-https://discord.com/api}
      - TRACE_GENAI_BASE_URL=https://${DOMAIN}/api/genai
      - TRACE_PROJECT_MANAGEMENT_BASE_URL=https://${DOMAIN}/api/project-management
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.comms.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/communication`)"
      - "traefik.http.services.comms.loadbalancer.server.port=8080"
      - "traefik.http.routers.comms.entrypoints=websecure"
      - "traefik.http.routers.comms.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.strip-comms.stripprefix.prefixes=/api/communication"
      - "traefik.http.routers.comms.middlewares=strip-comms"

  comms-db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=comms-db
      - MYSQL_ROOT_PASSWORD=${COMM_DB_PASSWORD}
    volumes:
      - comms_db_data:/var/lib/mysql/
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 3s
      retries: 10
      timeout: 5s

  transcription:
    image: ghcr.io/aet-devops25/team-scrumbags/transcription:${TRANSCRIPTION_IMAGE_TAG:-main}
    ports:
      - "8083:8080"
    depends_on:
      transcription-db:
        condition: service_healthy
    environment:
      - DEBUG=${DEBUG:-false}
      - SPRING_DATASOURCE_URL=jdbc:mysql://transcription-db:3306/transcription-db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${TRANSCRIPTION_DB_PASSWORD}
      - HF_TOKEN=${TRANSCRIPTION_HF_TOKEN}
      - USE_CLOUD=true
      - ASSEMBLYAI_API_KEY=${TRANSCRIPTION_ASSEMBLYAI_API_KEY}
      - TRANSCRIPTION_TIMEOUT=${TRANSCRIPTION_TIMEOUT:-300000}
      - GENAI_URL=https://${DOMAIN}/api/genai
      - USE_WHISPERX=false
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transcription.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/transcription`)"
      - "traefik.http.services.transcription.loadbalancer.server.port=8080"
      - "traefik.http.routers.transcription.entrypoints=websecure"
      - "traefik.http.routers.transcription.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.strip-transcription.stripprefix.prefixes=/api/transcription"
      - "traefik.http.routers.transcription.middlewares=strip-transcription"

  transcription-db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=transcription-db
      - MYSQL_ROOT_PASSWORD=${TRANSCRIPTION_DB_PASSWORD}
    volumes:
      - transcription_db_data:/var/lib/mysql/
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 3s
      retries: 10
      timeout: 5s

  genai:
    image: ghcr.io/aet-devops25/team-scrumbags/genai:${GENAI_IMAGE_TAG:-main}
    depends_on:
      genai-db:
        condition: service_healthy
    environment:
      - OLLAMA_CLOUD_URL=${GENAI_OLLAMA_CLOUD_URL:-https://gpu.aet.cit.tum.de/ollama}
      - NOMIC_API_KEY=${GENAI_NOMIC_API_KEY}
      - OPEN_WEBUI_BEARER=${GENAI_OPEN_WEBUI_BEARER}
      - WEAVIATE_URL=http://weaviate:6969
      - RABBITMQ_URL=amqp://${GENAI_RABBITMQ_USER}:${GENAI_RABBITMQ_PASSWORD}@rabbitmq/
      - MYSQL_URL=mysql+asyncmy://root:${GENAI_DB_PASSWORD}@genai-db:3306/genai-db
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.genai.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/genai`)"
      - "traefik.http.services.genai.loadbalancer.server.port=4242"
      - "traefik.http.routers.genai.entrypoints=websecure"
      - "traefik.http.routers.genai.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.strip-genai.stripprefix.prefixes=/api/genai"
      - "traefik.http.routers.genai.middlewares=strip-genai"

  genai-db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=genai-db
      - MYSQL_ROOT_PASSWORD=${GENAI_DB_PASSWORD}
    volumes:
      - genai_db_data:/var/lib/mysql/
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 3s
      retries: 10
      timeout: 5s

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${GENAI_RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${GENAI_RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq

  weaviate:
    command:
      - --host
      - 0.0.0.0
      - --port
      - "6969"
      - --scheme
      - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.31.2
    ports:
      - "6969:6969"
      - "50051:50051"
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      ENABLE_API_BASED_MODULES: "true"
      CLUSTER_HOSTNAME: "node1"

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.5
    command:
      - start-dev
      - --import-realm
    ports:
      - "7999:8080"
    environment:
      KC_HOSTNAME: auth.${DOMAIN}
      KC_HTTP_ENABLED: true
      KC_PROXY_HEADERS: xforwarded
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"

  prometheus:
    image: prom/prometheus:v3.5.0
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  node-exporter:
    image: prom/node-exporter:v1.9.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)"
    ports:
      - "9100:9100"

  grafana:
    image: grafana/grafana:12.0.2
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  alertmanager:
    image: prom/alertmanager:v0.28.1
    environment:
      - DISCORD_ALERTMANAGER_WEBHOOK_URL=${DISCORD_ALERTMANAGER_WEBHOOK_URL}
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - ./alertmanager/entrypoint.sh:/etc/alertmanager/entrypoint.sh:ro
    entrypoint: ["/bin/sh", "/etc/alertmanager/entrypoint.sh"]
    ports:
      - "9093:9093"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN}`)"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"

volumes:
  project_db_data:
  sdlc_db_data:
  comms_db_data:
  transcription_db_data:
  genai_db_data:
  weaviate_data:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local
  prometheus_data:
  grafana_data:
