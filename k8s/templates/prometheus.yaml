{{- if .Values.prometheus.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alert-rules
  namespace: {{ .Values.global.namespace }}
data:
  node_alerts.yml: |
{{ .Files.Get "prometheus/rules/node_alerts.yml" | indent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Values.global.namespace }}
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - "alertmanager-service:{{ .Values.alertmanager.port }}"
    rule_files:
      - /etc/prometheus/rules/*.yml
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:{{ .Values.prometheus.port }}']
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: node-exporter
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            action: keep
            regex: metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.prometheus.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsGroup: 65534
      containers:
        - name: prometheus
          image: {{ .Values.prometheus.image }}
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.enable-lifecycle'
            - '--web.external-url=https://{{ .Values.ingress.host }}/prometheus'
            - '--web.route-prefix=/prometheus'
          ports:
            - containerPort: {{ .Values.prometheus.port }}
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: prometheus-storage-volume
              mountPath: /prometheus
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-rules
          configMap:
            name: prometheus-alert-rules
        - name: prometheus-storage-volume
          persistentVolumeClaim:
            claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
    - port: {{ .Values.prometheus.port }}
      targetPort: {{ .Values.prometheus.port }}
      nodePort: {{ .Values.prometheus.nodePort }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: {{ .Values.global.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.prometheus.storageSize }}
{{- end }}