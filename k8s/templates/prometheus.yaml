{{- if .Values.prometheus.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alert-rules
  namespace: {{ .Values.global.namespace }}
data:
  node_alerts.yml: |
{{ .Files.Get "prometheus/rules/node_alerts.yml" | indent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Values.global.namespace }}
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - "alertmanager-service:{{ .Values.alertmanager.port }}"
          api_version: v2
          path_prefix: /alertmanager
    rule_files:
      - /etc/prometheus/rules/*.yml
    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
        - targets: ['localhost:{{ .Values.prometheus.port }}']

    - job_name: 'node-exporter'
      scrape_interval: 15s
      kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
              - team-scrumbags
      relabel_configs:
        # keep only the node-exporter service endpoints
        - source_labels: [__meta_kubernetes_service_name]
          regex: node-exporter-service
          action: keep
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          regex: metrics
          action: keep

    - job_name: 'alertmanager'
      static_configs:
        - targets: ['alertmanager-service:{{ .Values.alertmanager.port }}']
      scrape_interval: 15s

    - job_name: 'spring-boot-apps'
      static_configs:
        - targets:
          - 'project-management-service:{{ .Values.projectManagement.port }}'
          - 'sdlc-service:{{ .Values.sdlc.port }}'
          - 'communication-service:{{ .Values.communication.port }}'
          - 'transcription-service:{{ .Values.transcription.port }}'
      metrics_path: /actuator/prometheus
      scrape_interval: 15s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.prometheus.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      imagePullSecrets:
        - name: dockerhub-auth
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsGroup: 65534
      containers:
        - name: prometheus
          image: {{ .Values.prometheus.image }}
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.enable-lifecycle'
            - '--web.external-url=https://{{ .Values.ingress.host }}/prometheus'
            - '--web.route-prefix=/prometheus'
          ports:
            - containerPort: {{ .Values.prometheus.port }}
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: prometheus-storage-volume
              mountPath: /prometheus
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-rules
          configMap:
            name: prometheus-alert-rules
        - name: prometheus-storage-volume
          persistentVolumeClaim:
            claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
    - port: {{ .Values.prometheus.port }}
      targetPort: {{ .Values.prometheus.port }}
      nodePort: {{ .Values.prometheus.nodePort }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: {{ .Values.global.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.prometheus.storageSize }}
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: team-scrumbags
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-k8s
  namespace: team-scrumbags
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods"]
    verbs: ["get","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-k8s
  namespace: team-scrumbags
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-k8s
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: team-scrumbags