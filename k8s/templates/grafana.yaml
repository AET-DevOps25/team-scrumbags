{{- if .Values.grafana.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: {{ .Values.global.namespace }}
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: "http://prometheus-service:{{ .Values.prometheus.port }}/prometheus"
        access: proxy
        isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: {{ .Values.global.namespace }}
data:
  dashboards.yml: |
{{ .Files.Get "grafana/provisioning/dashboards/dashboards.yml" | indent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: {{ .Values.global.namespace }}
data:
  {{ (.Files.Glob "grafana/dashboards/*.json").AsConfig | nindent 2 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.grafana.replicas }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      imagePullSecrets:
        - name: dockerhub-auth
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsGroup: 472
      containers:
        - name: grafana
          image: {{ .Values.grafana.image }}
          ports:
            - containerPort: {{ .Values.grafana.port }}
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.grafana.adminUser }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trace-secrets
                  key: GRAFANA_ADMIN_PASSWORD
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_SERVER_ROOT_URL
              value: "https://{{ .Values.ingress.host }}/grafana"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: grafana
  type: NodePort
  ports:
    - port: {{ .Values.grafana.port }}
      targetPort: {{ .Values.grafana.port }}
      nodePort: {{ .Values.grafana.nodePort }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: {{ .Values.global.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.grafana.storageSize }}
{{- end }}